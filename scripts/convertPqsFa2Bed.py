'''
This file converts the FASTA (.FA) output file generated by the PQS finder to a .BED file. 

Demo command 
> python3 convertPqsFa2Bed.py CP028567.1_out.fa 1
'''
from Bio import SeqIO
import re
import sys

fasta_file = sys.argv[1]
chr = sys.argv[2]
out_file = f"chr{chr}_pqsfinder.bed"

pattern = r'((G{3,5})([ATCG]{1,12})(G{3,5})([ATCG]{1,12})(G{3,5})([ATCG]{1,12})(G{3,5}))|((C{3,5})([ATCG]{1,12})(C{3,5})([ATCG]{1,12})(C{3,5})([ATCG]{1,12})(C{3,5}))'

min_tetrad = 3 #nt
max_bulges = 1 #nb
max_mismatches = 1 #nm

out_file = open(out_file, "w")

for record in SeqIO.parse(fasta_file, "fasta"):

    params = record.id.split(";")
    sequence = str(record.seq)   
    
    start = int(params[2].split("=")[-1]) - 1 #convert to 0-based close
    end = int(params[3].split("=")[-1]) #convert to 0-based open [start, end)
    strand = params[4].split("=")[-1]
    score = float(params[5].split("=")[-1])
    nt = int(params[6].split("=")[-1]) #number of tetrads
    
    if nt >= min_tetrad and re.match(pattern, sequence) != None:
        out_file.write(f"chr{chr}\t{start}\t{end}\t{score}\t{end-start}\t{strand}\n")
    elif nt >= min_tetrad and re.match(pattern, sequence) == None: #error check step, suspicious G4!
        print(f"Sequence {sequence} does not match the pattern")  
        
print(f"Converted {fasta_file} to {out_file.name}")
out_file.close()
